package GUI;

import DTOs.AutomovilDTO;
import DTOs.LicenciaDTO;
import DTOs.PlacaDTO;
import Entidades.Automovil;
import GUI.Consultas.HistorialGenerado;
import GUI.Consultas.PersonasSimilares;
import GUI.Consultas.TramiteConsulta;
import GUI.Licencia.LicenciaGenerada;
import GUI.Licencia.TramiteLicenciaMenu;
import GUI.Licencia.VigenciaLicencia;
import GUI.Placas.PlacaGenerada;
import GUI.Placas.TramiteAutoNuevo;
import GUI.Placas.TramiteAutoUsado;
import GUI.Placas.TramiteGenerarPlacas;
import GUI.Placas.TramitePlacas;
import GUI.Reportes.TramiteReporte;
import GUI.Reportes.ReporteSolicitado;
import GUI.Reportes.ReportesGenerado;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.util.Calendar;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 * La clase Ventana representa la ventana principal de la aplicación bancaria.
 * Se encarga de gestionar la navegación entre diferentes vistas de la interfaz
 * de usuario, así como de interactuar con el usuario mediante ventanas
 * emergentes. También mantiene instancias de DTOs y una conexión a la base de
 * datos.
 *
 * @author Yohan Gabriel Melendrez Leal - 244907
 * @author Jesus Francisco Tapia Maldonado - 245136
 * @author Ximena Oliva Andrade - 247563
 */
public class ControladorVentana extends javax.swing.JFrame {

    private JPanel panelActual;

    /**
     * Constructor de la clase Ventana.
     */
    public ControladorVentana() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Agencia");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(526, 400));
        setResizable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 550, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 404, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    /**
     * Método para limpiar el contenido de la ventana. Si hay un panel
     * actualmente mostrado, lo elimina de la ventana.
     */
    public void limpiarFrame() {
        if (panelActual != null) {
            this.remove(panelActual);
            panelActual = null;
        }
    }

    /**
     * Método para cambiar a la vista de la ventana de Inicio. Este método
     * elimina el panel actual
     */
    public void cambiarVistaMenu() {
        limpiarFrame();
        Menu vistaMenu = new Menu(this);
        ponerEnJFrame(vistaMenu);
        panelActual = vistaMenu;
    }

    /**
     * Método para cambiar a la vista de la ventana de Carrito . Este método
     * elimina el panel actual
     *
     * @param licencia
     */
    public void cambiarVistaVigencia(LicenciaDTO licencia) {
        limpiarFrame();
        VigenciaLicencia vistaVigencia = new VigenciaLicencia(this, licencia);
        ponerEnJFrame(vistaVigencia);
        panelActual = vistaVigencia;
    }

    /**
     * Cambia la vista de la ventana a la pantalla de licencia generada. Elimina
     * el panel actual y muestra la pantalla de licencia generada.
     *
     * @param licencia La licencia asociada a la pantalla.
     */
    public void cambiarVistaLicenciaGenerada(LicenciaDTO licencia) {
        limpiarFrame();
        LicenciaGenerada vistaLicenciaGenerada = new LicenciaGenerada(this, licencia);
        ponerEnJFrame(vistaLicenciaGenerada);
        panelActual = vistaLicenciaGenerada;
    }

    /**
     * Método para cambiar a la vista de la ventana de MetodoPago . Este método
     * elimina el panel actual
     */
    public void cambiarVistaLicencia() {
        limpiarFrame();
        TramiteLicenciaMenu vistaLicencia = new TramiteLicenciaMenu(this);
        ponerEnJFrame(vistaLicencia);
        panelActual = vistaLicencia;
    }

    /**
     * Cambia la vista de la ventana a la pantalla de trámite para un automóvil
     * nuevo. Elimina el panel actual y muestra la pantalla de trámite para un
     * automóvil nuevo.
     */
    public void cambiarVistaTramiteAutoNuevo() {
        limpiarFrame();
        TramiteAutoNuevo tramiteAutoNuevo = new TramiteAutoNuevo(this);
        ponerEnJFrame(tramiteAutoNuevo);
        panelActual = tramiteAutoNuevo;
    }

    /**
     * Cambia la vista de la ventana a la pantalla de trámite para un automóvil
     * usado. Elimina el panel actual y muestra la pantalla de trámite para un
     * automóvil usado.
     */
    public void cambiarVistaTramiteAutoUsado() {
        limpiarFrame();
        TramiteAutoUsado tramiteAutoUsado = new TramiteAutoUsado(this);
        ponerEnJFrame(tramiteAutoUsado);
        panelActual = tramiteAutoUsado;
    }

    /**
     * Cambia la vista de la ventana a la pantalla de trámite de placas. Elimina
     * el panel actual y muestra la pantalla de trámite de placas.
     */
    public void cambiarVistaPlaca() {
        limpiarFrame();
        TramitePlacas vistaPlacas = new TramitePlacas(this);
        ponerEnJFrame(vistaPlacas);
        panelActual = vistaPlacas;
    }

    /**
     * Cambia la vista de la ventana a la pantalla de placas generadas. Elimina
     * el panel actual y muestra la pantalla de placas generadas.
     *
     * @param placa El número de placa generado.
     * @param costo El costo de la placa generada.
     */
    public void cambiarVistaPlacaGenerada(String placa, String costo) {
        limpiarFrame();
        PlacaGenerada placaGenerada = new PlacaGenerada(this, placa, costo);
        ponerEnJFrame(placaGenerada);
        panelActual = placaGenerada;
    }

    /**
     * Cambia la vista a la ventana para generar un trámite de placas. Este
     * método limpia el frame actual, crea una instancia de TramiteGenerarPlacas
     * con los parámetros proporcionados, y muestra esa instancia en el frame.
     *
     * @param auto Objeto AutomovilDTO que representa los datos del automóvil
     * asociado al trámite.
     * @param placa Objeto PlacaDTO que representa los datos de la placa
     * asociada al trámite.
     * @param tipo El tipo de trámite a realizar.
     * @param modo El modo de operación del trámite (por ejemplo, nuevo o
     * usado).
     */
    public void cambiarVistaTramiteGenerar(AutomovilDTO auto, PlacaDTO placa, String tipo, int modo) {
        limpiarFrame();
        TramiteGenerarPlacas tramiteGenerarPlacas = new TramiteGenerarPlacas(this, auto, placa, tipo, modo);
        ponerEnJFrame(tramiteGenerarPlacas);
        panelActual = tramiteGenerarPlacas;
    }

    /**
     * Cambia la vista a la ventana para generar un trámite de placas. Este
     * método limpia el frame actual, crea una instancia de TramiteGenerarPlacas
     * con los parámetros proporcionados, y muestra esa instancia en el frame.
     *
     * @param numPlaca El número de placa asociado al trámite.
     * @param placa Objeto PlacaDTO que representa los datos de la placa
     * asociada al trámite.
     * @param tipo El tipo de trámite a realizar.
     * @param modo El modo de operación del trámite (por ejemplo, nuevo o
     * usado).
     */
    public void cambiarVistaTramiteGenerar(String numPlaca, PlacaDTO placa, String tipo, int modo) {
        limpiarFrame();
        TramiteGenerarPlacas tramiteGenerarPlacas = new TramiteGenerarPlacas(this, numPlaca, placa, tipo, modo);
        ponerEnJFrame(tramiteGenerarPlacas);
        panelActual = tramiteGenerarPlacas;
    }

    /**
     * Cambia la vista de la ventana a la pantalla de trámite de reporte.
     * Elimina el panel actual y muestra la pantalla de trámite de reporte.
     */
    public void cambiarVistaTramiteReporte() {
        limpiarFrame();
        TramiteReporte TramiteReporte = new TramiteReporte(this);
        ponerEnJFrame(TramiteReporte);
        panelActual = TramiteReporte;
    }

    /**
     * Cambia la vista de la ventana a la pantalla de reporte solicitado.
     * Elimina el panel actual y muestra la pantalla de reporte solicitado.
     *
     * @param nombre El nombre relacionado con el reporte solicitado.
     * @param tipo El tipo de reporte solicitado.
     * @param desde La fecha de inicio del período del reporte.
     * @param hasta La fecha de fin del período del reporte.
     */
    public void cambiarVistaReporteSolicitado(String nombre, String tipo, Calendar desde, Calendar hasta) {
        limpiarFrame();
        ReporteSolicitado reporteSolicitado = new ReporteSolicitado(this, nombre, tipo, desde, hasta);
        ponerEnJFrame(reporteSolicitado);
        panelActual = reporteSolicitado;
    }

    /**
     * Cambia la vista de la ventana a la pantalla de reporte generado. Elimina
     * el panel actual y muestra la pantalla de reporte generado.
     */
    public void cambiarVistaReporteGenerado() {
        limpiarFrame();
        ReportesGenerado reporteGenerado = new ReportesGenerado(this);
        ponerEnJFrame(reporteGenerado);
        panelActual = reporteGenerado;
    }

    /**
     * Cambia la vista de la ventana a la pantalla de consulta. Elimina el panel
     * actual y muestra la pantalla de consulta.
     */
    public void cambiarVistaConsulta() {
        limpiarFrame();
        TramiteConsulta historial = new TramiteConsulta(this);
        ponerEnJFrame(historial);
        panelActual = historial;
    }

    /**
     * Cambia la vista de la ventana a la pantalla de personas similares.
     * Elimina el panel actual y muestra la pantalla de personas similares.
     *
     * @param nombre El nombre para buscar personas similares.
     * @param curp La CURP para buscar personas similares.
     * @param anio El año de nacimiento para buscar personas similares.
     */
    public void cambiarVistaPersonasSimilares(String nombre, String curp, Integer anio) {
        limpiarFrame();
        PersonasSimilares personasSimi = new PersonasSimilares(this, nombre, curp, anio);
        ponerEnJFrame(personasSimi);
        panelActual = personasSimi;
    }

    /**
     * Cambia la vista de la ventana a la pantalla de consulta generada. Elimina
     * el panel actual y muestra la pantalla de consulta generada.
     *
     * @param RFC El RFC para la consulta generada.
     */
    public void cambiarVistaConsultaGenerada(String RFC) {
        limpiarFrame();
        HistorialGenerado historialGenerado = new HistorialGenerado(this, RFC);
        ponerEnJFrame(historialGenerado);
        panelActual = historialGenerado;
    }

    /**
     * Método para agregar un panel a la ventana. Este método agrega el panel
     * especificado a la ventana, lo posiciona y ajusta su tamaño
     * automáticamente.
     *
     * @param panel El panel que se va a agregar a la ventana.
     */
    public void ponerEnJFrame(JPanel panel) {
        // Se obtiene el tamaño preferido del panel
        Dimension panelSize = panel.getPreferredSize();

        // Se agrega un margen adicional para garantizar que el panel se muestre completamente
        int margin = 18; // Puedes ajustar este valor según sea necesario
        panelSize.width += margin;
        panelSize.height += margin;

        setPreferredSize(panelSize);

        setLocationRelativeTo(null);

        setContentPane(panel);

        pack();

        setVisible(true);
    }

    /**
     * Método para mostrar un aviso al usuario mediante una ventana emergente.
     *
     * @param mensaje El mensaje a mostrar en el aviso.
     */
    public void mostrarAviso(String mensaje) {
        JOptionPane.showMessageDialog(this, mensaje, "Aviso", JOptionPane.WARNING_MESSAGE);
    }

    /**
     * Método para mostrar una ventana emergente de confirmación al usuario.
     *
     * @param mensaje El mensaje a mostrar en la ventana de confirmación.
     * @param titulo El título de la ventana de confirmación.
     * @return true si el usuario selecciona "OK", false si selecciona
     * "Cancelar".
     */
    public boolean mostrarConfirmacion(String mensaje, String titulo) {
        int respuesta = JOptionPane.showConfirmDialog(null, mensaje, titulo, JOptionPane.OK_CANCEL_OPTION);
        return respuesta == JOptionPane.OK_OPTION;
    }

    /**
     * Método para mostrar una ventana emergente de información al usuario.
     *
     * @param mensaje El mensaje a mostrar en la ventana de información.
     * @param titulo El título de la ventana de información.
     */
    public void mostrarInformacion(String mensaje, String titulo) {
        JOptionPane.showMessageDialog(this, mensaje, titulo, JOptionPane.INFORMATION_MESSAGE);
    }

}
